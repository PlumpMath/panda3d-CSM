//Cg

void vshader(float4 vtx_position : POSITION,
             float2 vtx_texcoord0: TEXCOORD0,
             float3 vtx_normal: NORMAL,

             uniform float4x4 trans_model_to_clip_of_light1,
             uniform float4x4 trans_model_to_clip_of_light2,
             uniform float4x4 trans_model_to_clip_of_light3,
             
             uniform float4x4 mat_modelproj,
             
             uniform float4 mspos_light1,
             uniform float4 mspos_light2,
             uniform float4 mspos_light3,
             
             uniform float4 k_ambient,
             uniform float4 k_scale,
             uniform float4 k_push,

             out float4 l_position : POSITION,
             out float2 l_texcoord0 : TEXCOORD0,

             out float4 l_shadowcoord1 : TEXCOORD1,
             out float4 l_shadowcoord2 : TEXCOORD4,
             out float4 l_shadowcoord3 : TEXCOORD5,
             
	     out float  l_smooth : TEXCOORD2,
	     
	     out float4 l_lightclip : TEXCOORD3
	     
	     
             )

{
float4 position = vtx_position * k_scale;

// vertex position
l_position = mul(mat_modelproj, position);

// Pass through texture coordinate for main texture.
l_texcoord0 = vtx_texcoord0;

# 1

l_smooth = saturate(dot(vtx_normal, normalize(mspos_light1 - position))); // Calculate the surface lighting factor.
float4 pushed = position + float4(vtx_normal * k_push, 0); // Calculate light-space clip position.
l_lightclip = mul(trans_model_to_clip_of_light1, pushed);
l_shadowcoord1 = l_lightclip * float4(0.5,0.5,0.5,1.0) + l_lightclip.w * float4(0.5,0.5,0.5,0.0); // Calculate shadow-map texture coordinates.

#2 

l_smooth = saturate(dot(vtx_normal, normalize(mspos_light2 - position))); // Calculate the surface lighting factor.
pushed = position + float4(vtx_normal * k_push, 0); // Calculate light-space clip position.
l_lightclip = mul(trans_model_to_clip_of_light2, pushed);
l_shadowcoord2 = l_lightclip * float4(0.5,0.5,0.5,1.0) + l_lightclip.w * float4(0.5,0.5,0.5,0.0); // Calculate shadow-map texture coordinates.

#3

l_smooth = saturate(dot(vtx_normal, normalize(mspos_light3 - position))); // Calculate the surface lighting factor.
pushed = position + float4(vtx_normal * k_push, 0); // Calculate light-space clip position.
l_lightclip = mul(trans_model_to_clip_of_light3, pushed);
l_shadowcoord3 = l_lightclip * float4(0.5,0.5,0.5,1.0) + l_lightclip.w * float4(0.5,0.5,0.5,0.0); // Calculate shadow-map texture coordinates.
}


void fshader(in float2 l_texcoord0 : TEXCOORD0,
             in float4 l_shadowcoord1 : TEXCOORD1,
             in float4 l_shadowcoord2 : TEXCOORD4,
             in float4 l_shadowcoord3 : TEXCOORD5,
             
             in float  l_smooth : TEXCOORD2,
             in float4 l_lightclip : TEXCOORD3,
             uniform sampler2D tex_0 : TEXUNIT0,
             uniform sampler2D k_Ldepthmap1 : TEXUNIT4,
             uniform sampler2D k_Ldepthmap2 : TEXUNIT5,
             uniform sampler2D k_Ldepthmap3 : TEXUNIT6,
             
             uniform float4 k_ambient,
	     uniform float4 k_texDisable,
             out float4 o_color:COLOR)
{

  float mapval,shade=0;

  float4 baseColor = float4(1,1,1,1); 
  
  float4 proj = l_shadowcoord3 / l_shadowcoord3.w;
  if (proj.x > 0 && proj.x < 1 && proj.y > 0 && proj.y < 1)  
  {
	  mapval = tex2D(k_Ldepthmap3,proj.xy);
	  shade = (mapval > proj.z);
  } else {
	  proj = l_shadowcoord2 / l_shadowcoord2.w;
	  if (proj.x > 0 && proj.x < 1 && proj.y > 0 && proj.y < 1)  
	  {
		  mapval = tex2D(k_Ldepthmap2,proj.xy);
		  shade = (mapval > proj.z);
	  } else {
		  proj = l_shadowcoord1 / l_shadowcoord1.w;
		  if (proj.x > 0 && proj.x < 1 && proj.y > 0 && proj.y < 1)  
		  {
			  mapval = tex2D(k_Ldepthmap1,proj.xy);
			  shade = (mapval > proj.z);
		  } 
	  } 
  }
  
  o_color = baseColor * ( l_smooth * shade + k_ambient.x );
  
}
